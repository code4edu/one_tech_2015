@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Урок 4";
}

<div class="page-header">
    <h1>Урок 4</h1>
</div>



Данный урок очень простой, поэтому можете читать его по диагонали. Однако для новичков все же некоторые моменты разжую в своей манере изложения.<br><br>
Как не парадоксально, но все программирование держится на нескольких столпах обычной логики, из которой потом вытекают различные алгоритмы. Одним из самых главных таких столпов является условный оператор или, как его еще называют, оператор выбора.<br><br>
С выбором мы всегда сталкиваемся в повседневной жизни. Мы смотрим в окно и увидев теплую солнечную погоду одеваемся по летнему легко. Если же видим дождь, берем зонтик и т.д. Точно так и в программировании – нам всегда приходится оперировать условиями.<br><br>
Допустим, ваш метод возвращает какое-то условие. Например, вы пишете класс Medical, который выписывает пациенту то или иное лекарство в зависимости от многих параметров, например веса.  Естественно, что вес у всех разный, а это значит, что доза лекарства будет разной. В этом случае нам и пригодится выбор. Давайте рассмотрим этот пример.<br><br>
Создайте Консольный проект и назовите его Lesson.<br><br>

Пока мы еще не рассматривали с вами аспекты работы с классами, поэтому поместим наш класс Medical в тот же файл, где будет главный класс с точкой входа в программу.  Однако знайте на будущее –так делать не стоит. Классы лучше всегда помещать в отдельный файл, благо Visual C# или Sharp Developer позволяет сделать это всего двумя щелчками мышки.
<br><br>Перед class Program напишем наш класс Medical.  В нашем случае этот класс будет делать только одно действие –возвращать норму потребления лекарства. Поэтому код будет очень маленьким. Фактически, это лучше было бы сделать в коде, однако я хочу постепенно приучать вас к объектно-ориентированному мышлению. А оно здесь таково – есть сущность (некое лечение пациента), а значит, что нужно использовать класс для описания этой сущности.  И несмотря на то, что сейчас код будет избыточным, в последствии мы выиграем от такого подхода (представьте себе тот факт, что объект очень скоро сможет ставить диагноз, выписывать рецепты, советовать, как вести себя дальше).  В общем, классы крайне полезная штука и не нужно их бояться.
<br><br>Итак, наш класс будет иметь всего один (для этого урока более чем достаточно) метод, возвращающий  норму потребления лекарства в зависимости от веса.  Чтобы не загружать лишний раз вам мозг, сделаем данный метод статическим (метод класса, если быть точным). Кстати, здесь я также нарушил все, что можно. Во-первых, у меня нет здесь атрибутов класса (переменных), кроме того, я пишу в стиле C++, имея в виду метод getter, хотя должен использовать свойства (property). Но пока вы к этому не готовы.
<br><br>Мой класс выглядит таким образом:<br><br>
<code>
    class Medical<br>
    {<br>
    public static string getDozaLekarstva (int ves)<br>
    {<br>
    if (ves>=60) return "Вам нужно принимать по 2 таблетки витамина";<br>
    else<br>
    return "Ваша норма -одна таблетка";<br>
    }<br>
    }<br><br>
</code>
В данном участке кода нас пока интересует лишь конструкция if… else. Это как раз и обозначает условие.  Мы передаем программе вес и проверяем его на условие. Если он больше 60 килограммов, то пишем, что нужно принимать по 2 таблетки, в ином случае достаточно и одной. Полный код выглядит так:<br><br>
<code>
    using System;<br>
    <br>
    namespace Lesson<br>
    <br>
    {<br>
    class Medical<br>
    {<br>
    public static string getDozaLekarstva (int ves)<br>
    {<br>
    if (ves>=60) return "Вам нужно принимать по 2 таблетки витамина";<br>
    else<br>
    return "Ваша норма -одна таблетка";<br>
    }<br>
    }<br>
    class Program<br>
    {<br>
    public static void Main(string[] args)<br>
    {<br>
    <br>
    Console.WriteLine(Medical.getDozaLekarstva(80));<br>
    Console.Write("Press any key to continue . . . ");<br>
    Console.ReadKey(true);<br>
    }<br>
    }<br>
    }<br><br>
</code>
Скомпилируйте и посмотрите на результат. Кстати, обратите внимание на вызов метода getDozaLekarstva (). Во-первых,  он вызывается после имени класса (наподобие WriteLine у класса Console), а во-вторых принимает параметр, который и будет весом пациента, от которого будет плясать наш выбор. Пока можете на это не обращать внимание. Единственное, что прошу вас пока поэкспериментировать с передаваемым методу весом.
<br><br>Итак, выбор в C# осуществляется конструкцией if… else.  Выглядит это так:<br>
<code>
if (условие)<br>
            Действие;<br>
else<br>
            Действие;<br>
    </code>
Такая конструкция применялась в моем примере. Однако обратите внимание, что не всегда действите бывает одно после if или else. Если их несколько, то нужно заключать их в операторные скобки {}.
<br><br><code>
    if (условие)<br>
    {Действие 1;<br>
    Действие 2;<br>
    }<br>
    else<br>
    Действие<br>
</code>
If на самом деле возвращает всего два значения – истину или ложь. Если ваше условие истина, то выполняется указанное вами действие1, если же нет, то –действие 2.
<br><br>В качестве условия могут выступать следующие операторы:<br><br>
==	Сравнение<br>
>	больше<br>
<	меньше<br>
>=	Больше или равно<br>
<=	Меньше или равно<br>
!=	Не равно<br>
!	Логическое не (отрицание)<br><br>
Здесь может возникнуть вопрос только по последнему оператору. Это  логическое  отрицание. Лучше всего показать вам это на примере:<br><br>
<code>
    bool  summer=true;<br>
    <br>
    if (!summer) Console.WriteLine (“А лета то и нет!”);
</code><br>
Думаю, вы поняли. Кстати, обратили внимание на то, что в приведенном примере нет else? Это не ошибка и не мой склероз – if как раз может так делать, когда нам нужно проверить всего одно какое-то значение, у которого просто логически нет альтернативного варианта в виде else.
<br><br>Ну и напоследок по этому уроку  — if может быть вложенным, равно как и else. Причем в случае с последним организуется подобие множественного выбора (но лучше использовать для этого switch), о чем поговорим в следующем уроке.
<br><br>Пример на псевдокоде:<br><br>
<code>
    if (условие) Действие1;<br>
    else if (условие2) Действие2;<br>
    else Действие3;<br>
</code><br>
Видите, все просто. Единственное, что  для полного закрепления урока нужна практика. По упражняйтесь сами или подождите Практикума по C# через несколько уроков.
<br><br>Но прежде, чем закончить урок – обратите внимание, что я писал действия после скобок с условием. Так допускается писать, если выражение маленькое, но лучше не подражать такому стилю и писать действие на следующей строчки.
<br><br>Еще один важный момент —  условий может быть несколько. Например, нам нужно будет сравнивать на соответствие два условия одновременно или же нас удовлетворит всего одно. Учтите, что таких условий может вообще несколько, а не два. В этом случае нам пригодятся операторы или (||) и (&&). Например:
<code><br><br>
    int a=2, b=5;<br>
    if ((a>1) && (b<6)) console.writeline (“диапазон правильный”); />/ если а> 5 и b<6 здесь проверяется на соответствие оба значения. если нам нужно только одно, то я бы вместо && поставил бы ||.<br>
</code>


<br><br>Конструкция if.. else в основном всегда удовлетворяет потребности программиста. Однако иногда встречаются моменты, когда нужно выбрать одно условие из нескольких и тогда данная конструкция в C# окажется громоздкой.
<br><br>Например, представьте себе, что вы пишите программку, в которой пользователю нужно выбрать из нескольких вариантов нужный размер окна и т.д. Допустим, нам нужно выбрать цвет, причем нам представлена стандартная трехцветная гамма RGB (красный, зеленый, синий – те цвета, которые воспринимает человеческий глаз и из которого уже строит отдельную картинку).  Чтобы программа была наглядной, мы будем менять задний фон консоли свойством  BackgroundColor ,который принимает в качестве значения вариант из перечисления ConsoleColor. Что такое перечисления, я расскажу подробно в следующей лекции, а сейчас вам важно знать, что это константный набор значений, доступ к элементам которого осуществляется через точку. Конечно, в данном примере наглядней было бы использовать WindowsForms, однако для обучения лучше все же использовать консоль.
<br><br>Итак, зная операторы if else, мы могли написать так:
<code><br><br>
Console.WriteLine ("Введите название любого из трех цветов - красный, зеленый, синий");<br>
String vibor=Console.ReadLine (); // получим цвет<br>
vibor=vibor.ToLower ().Trim (); // чтобы компилятору не ошибиться, приводим всю строку к нижнему регистру<br>
if (vibor=="зеленый")<br>
Console.BackgroundColor=ConsoleColor.Green;<br>
else if (vibor=="красный")<br>
Console.BackgroundColor=ConsoleColor.Red;<br>
    <br>
else if (vibor=="синий")<br>
Console.BackgroundColor=ConsoleColor.Blue;<br>
else<br>
Console.WriteLine ("Простите, но я не знаю такой цвет");<br>
Console.Write("Press any key to continue . . . ");<br>
Console.ReadKey(true);<br><br></code>
Давайте поясню немного по коду. Я объявил переменную vibor строкой и считал в нее значение из консоли.  Не забывайте, что все мы люди и кто-то может написать отсебячину с большой буквы или же добавить лишние пробелы. Я уменьшил эти риски, используя метод ToLower () для  преобразования строки в нижний регистр (например, кто-то напишет зеЛеный, а строка в результате применения ToLower () получит значение «зеленый»), а для удаления всех лишних пробелов использовал метод Trim ().
<br><br>Совет: Всегда предугадывайте все лишние телодвижения пользователя! Нужно максимально продумать все ошибки, которые он может вызвать и предупредить их.
<br><br>Далее, все уже как и должно быть – мы сравниваем строку с вариантами цвета  в операторе if и красим задний фон в этот цвет. Если пользователь намудрил и ввел не тот цвет или сделал ошибку (например, написал «зиленый»), то в операторе else мы сообщим ему об этом.
<br><br>Вроде бы, ничего страшного не произошло.  Но что, если мы решим использовать цвета радуги, а? Будем писать семь if else if? Получится весьма громоздко и несколько медленно. К счастью, C# позволяет нам решить данную задачу более изящным путем – используя оператор switch.
<br><br>Давайте рассмотрим, как работает данный оператор. Его синтаксис прост:<br><br>
<code>
switch (селектор)<br>
{<br>
case  вариант_селектора1: выражение;<br>
break;<br>
case  вариант_селектора2: выражение;<br>
break;<br>
…<br>
//вариант по умолчанию, аналог else<br>
default:<br>
Выражение, которое должно выполниться по умолчанию;<br>
break;<br>
}</code><br>
Занятный, синтаксис, не так ли? Однако на практике он выглядит гораздо удобнее, нежели в этом псевдокоде. Нашу задачу с выбором цвета теперь можно решить так:
<br><br>
<code>
switch (vibor) {<br>
case "зеленый": Console.BackgroundColor=ConsoleColor.Green; break;<br>
case "красный": Console.BackgroundColor=ConsoleColor.Red; break;<br>
case "синий": Console.BackgroundColor=ConsoleColor.Blue;break;<br>
default:<br>
Console.WriteLine ("Простите, но я не знаю такой цвет"); break;<br>
}<br>
    </code>
<br>Видите, насколько удобно? Хотя этот синтаксис кажется громоздким, вы к нему очень быстро привыкните и будете часто его использовать в последствии. Кстати, кто не понял, как работает оператор switch, могу посоветовать запустить VC# в режиме отладки (клавиша F11), которую нужно нажимать на каждой операции. Пока отладку оставим в покое для специальной статьи. Вам главное сейчас для себя уяснить, как работает switch.
<br><br>Переменная vibor является как раз в нашем случае селектором. В зависимости от значения этой переменной, которое мы определяем в ветках case, компилятор решает, как ему поступить в дальнейшем. После case может быть как одно, так и несколько выражений. Обратите внимание на оператор break – он прерываем выполнение этой ветки. Без него C# будет сильно материться. Хотя в других языках его можно и опустить – так сравнение побежит по всем веткам, пока не найдется break.
<br><br>Оператор default по принципу похож  с else. Так же как и там, если условие не выполнится, ход выполнения программы перейдет в ветку default.  Так же как и else, default в switch может и не быть. Имейте это в виду.
<br><br>Внимание! В C# после выражения в default нужно обязательно ставить break, иначе это будет ошибкой. Так что программисты, изучавшие С имейте это в виду.
<br><br>Хейлсберг внес в C# еще одно новшество, которое лишь относительно недавно было реализовано в java, а в C++ его до сих пор нет. Дело в том, что еще со времен C селектором могли выступать числовые, символьные типы данных, но не строки. Однако часто требовалось сравнивать именно строки. Поэтому в C# была внедрена эта особенность.
<br><br>Тернарный оператор
<br><br>C# в наследство от C досталась сокращенная форма if else, именуемая тернарным оператором. Синтаксис у него весьма экстравагантен:
<br><br>Условие ? Действие, если условие истина  : Действие, если условие ложь (аналог else);<br><br>
<code>
int vb=12;<br>
Console.WriteLine (vb==12 ? "vb равно 12" : "vb не равно 12");<br></code>
<br><br>Сравните это выражение с обычным if else и поймете всю разницу.