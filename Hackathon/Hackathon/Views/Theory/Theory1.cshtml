@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Урок 1";
}

<div class="page-header">
    <h1>Урок 1</h1>
</div>
<p>
    Нет языка программирования более обсуждаемого, чем C# (произносится как си шарп). Его триумфальное шествие сначала в мире Windows, а потом уже и на других платформах в виде Mono поражает воображение. Этот язык снискал себе то место, которое не удалось достигнуть ни одному языку. Обладая легкостью к изучению, C# позволяет писать сложные программы. Если вы хотите научиться писать сложные программы и не мучаться с переносом их на другие платформы – C# ваш выбор.
    Этот урок будет вводным. Я немного расскажу, почему этот язык наиболее популярен и еще долго будет пользоваться спросом у работодателей. Да-да, C# разработчики найдут себе место под солнцем в любой стране, хотя, к сожалению, их зарплаты начали сползать вниз. Тем не менее, обширные области применения C# позволяют разработчику так или иначе реализовать себя.
    Давайте немного коснемся языка. Несмотря на то, что он считается двоюродным братом Java, все же это развитие C++. В C# можно использовать указатели, хотя и не рекомендуется делать, в нем остались структуры, правда в несколько извращенной от C форме. Всего этого нет в Java. Вместе с тем, программы на C# могут выполняться на платформах, где стоит виртуальная машина .Net. Конечно, до полной явашной переносимости еще далеко, но программы написанные на любом дотнетовском языке обгоняют по скорости приложения на яве.
    Майкрософт изначально сделала ставку на то, что программистами этого языка будут переметнувшиеся с Делфи. Компания наняла знаменитого всем паскальщикам Андерса Хейлсберга для разработки принципиально нового языка, который должен впитать в себя все самое лучшее из других языков. Нужно сказать, у Хейлсберга это получилось.
    C# позволяет с легкостью, присущей Делфи или VB писать программы с формами и т.д. Он может манипулировать системными библиотеками. На нем удобно работать с базами данных и веб-сервисами. Благодаря различным фрэймоворкам, C# легко подходит для написания графических игр или торговых роботов. В общем, о C# можно писать очень много. Поэтому, чтобы вас не загружать, давайте в этом уроке напишем программу, которая должна помочь вам немного понять язык.
    В качестве среды разработки могу вам посоветовать Visual C# Express любой версии, желательно с 2008 или опенсорсный Sharp Developer. Тем не менее, если у вас нет сейчас среды разработки, давайте напишем и скомпилируем программу подручными средствами.
    Итак, откройте блокнот и напишите там следующий код:
</p>

    <code>
        using system;
        namespace lesson1
        {
        class program
        {
        public static void main(string[] args)
        {
        console.writeline("Hello, World!");
        console.write("нажмите кнопку для продолжения”);
        console.readkey(true);
        }}}    </code>


<p>
    набрали? замечательно. теперь сохраните этот файл с именем lesson1 расширением cs. немного поясню по коду. в директиве using мы подключили пространстов имен system, где хранятся нужные нам классы и методы для работы с консолью. что такое пространство имен и для чего оно нужно мы поговорим с вами в специальном уроке. по этой же причине нужно поставить ключевое слово namespace (пространство имен) и lesson1 (можете дать любое название, но лучше мое).
    затем идет имя класса. обратите внимание – программа на c# состоит из одного или нескольких классов. что это такое, мы рассмотрим в дальнейшем. обратите внимание, что какой бы класс не использовался, главным будет тот, в котором есть точка входа в программу метод main. понимаю, что все это для вас написано как иероглифы, но с этим нужно пока мириться.
    в фигурных скобках я уже описываю наш блок кода, который выполняет вывод надписи на экран «ваше слово, товарищ хейлсберг». это осуществляется с помощью метода writeline (пиши линию) класса console (консоль). метод readkey позволяет программе работать пока мы не нажмем любую кнопку на клавиатуре.
    к сожалению, большинство слушателей моих лекций всегда возмущались тем фактом, что я их сразу же ввожу в объектно-ориентированное программирование. увы, c#, равно как java – полностью объектно-ориентированные языки. и чтобы нормально с ними работать нужно привыкать к лексике. все это мы будем рассматривать в дальнейшем. пусть вас это не пугает. в любом случае, мне кажется, что c# или java все же проще для изучения.
    итак, у вас есть файл с исходниками, который нам нужно скомпилировать. внимание, обманем компьютер! нажмите теперь сочетание клавиш win+f и вбейте в окошко поиска csc.exe. это компилятор си шарпа, который должен лежать в папке с файлами .net framework. как только поиск выдаст вам, где лежит компилятор, переходите в эту папку и скопируйте в нее файл lesson1.cs. учтите, я показываю сейчас то, что делать крайне не рекомендуется. даже в этом случае папку с компилятором следует добавить в окружение windows, но мы не будем этим заниматься. вместо этого поступим иначе.
    вбейте в командной строке
    cd путь к папке с csc
    csc.exe />target:exe  Lesson1.cs
    Должен запуститься компилятор и выдать вам результат в виде Lesson1.exe.


</p>