@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Урок 5";
}

<div class="page-header">
    <h1>Урок 5</h1>
</div>

Помимо выбора того или иного действия, часто в программах приходится выполнять какие-то повторяющиеся действия, причем они должны выполняться до тех пор, пока не будет достигнуто какое-то условие, достигнув которого программа прекращается повторять эти действия. Это как раз пресловутый цикл.
<br><br>Это тема, равно как и тема об операторах выбора очень легкая. Вам важно просто понять, что и как применять. Давайте рассмотрим цикл с точки зрения человека.
<br><br>Итак, вы наверняка следите за своей физической формой и делаете по утрам хотя бы отжимания от пола. Ваш алгоритм действий примерно такой: вы принимаете упор лежа, отжались раз, распрямили руки и вновь отжались. И так пока вы либо не устанете, либо не выполните поставленное условие (мне надо отжаться сегодня 100 раз!).  Как видите, сам процесс отжимания это не более чем обычный повтор одних и тех же действий, т.е. тот же по сути цикл. Надеюсь, вы поняли суть. Если нет, то ниже мы уже разберем цикл на примерах. Для тех, кто лучше усваивает визуальную информацию,  можете посмотреть мой урок по с++ 6. В нем я  также приводил блок-схемы циклов.
<br><br>В C# циклы делятся на четыре группы: цикл с предусловием, цикл с постусловием, параметризованный цикл и так называемый цикл Для каждого (foreach). Давайте рассмотрим их на нашем примере с отжиманием.
<br><br>Традиционно легким для изучения считаются циклы с пре и пост условиями.  Их синтаксис такой:<br>
а) Цикл с предусловием:<br>
while (условие)<br>
действие;<br>
б)Цикл с постусловием<br>
do<br>
{<br>
Действие;<br>
}<br>
while (условие выхода из цикла);<br><br>
Обратите внимание на то, что в пункте а я указал всего одно действие. Их может быть много, тогда после скобок с условием ставятся операторные скобки {} (правило то же, что и в if). Тоже самое относится и к остальным циклам (исключение цикл с постусловием, так как там уже есть операторные скобки)
<br><br>while (условие)<br>
{Действие1;<br>
Действие2;<br>
}<br><br>
А теперь давайте рассмотрим, как работают  эти циклы.<br><br>
Итак, опишем наш алгоритм с помощью цикла с предусловием. Допустим, что вы собрались отжаться 30 раз. Тогда наш алгоритм будет выглядеть так:<br><br>
<code>
    <br>
    int  КоличествоОтжиманий=0; //пока мы не отжимались<br>
    <br>
    while (КоличествоОтжиманий<30){ количествоотжиманий++;
        <br>
        }<br>
</code><br>
    как видите, все предельно просто. я ввел счетчик количествоотжиманий, который потом уже использовал в качестве проверки условия. в теле цикла я уже приращивал этот счетчик на единицу. как только у меня количествоотжиманий сравнялось 30, цикл прекращает свою работу.
<br><br>  хорошо, а как же тогда работает цикл с постусловием. представьте себе «спортсмена», для которого эти самые отжимания в тягость. он делает отжимание и с надеждой вслушивается в голос тренера, который ему сообщает сколько он сделал. и тогда этот спортсмен обреченно делает эти отжимания до тех пор, пока не будет выполнена поставленная норма. конечно, я несколько утрирую, но просто в памяти вскочил армейский эпизод ) .
<br><br><code>
    int количество отжиманий=0; //пока мы не отжимались<br>
    <br>
    do<br>
    <br>
    {<br>
    <br>
    Количество Отжиманий++;<br>
    <br>
    }<br>
    <br>
    while (КоличествоОтжиманий<30)<br>
</code>
<br> обратили внимание на тот факт, что этот цикл выполнится хотя бы один раз? в этом и есть самое главное различие. представьте себе, когда тренер говорит своему подопечному, чтобы тот отжался 30 раз. если спортсмен делал это уже, то он его просто пошлет куда подальше
<br><code>
    <br>
    int количествоотжиманий=30; />/Этот цикл уже никогда не выполнится<br>
    <br>
    while (КоличествоОтжиманий<=30)<br>
    {<br>
    КоличествоОтжиманий++;<br>
    }<br>
</code><br>
    А в случае цикла с постусловием спортсмену придется еще раз отжаться, чтобы сообразить, что он уже делал эти пресловутые 30 отжиманий.<br><br>
    Не забывайте, что выходом из цикла является условие. Если оно истина, то выходим, ложь – продолжаем дальше. Поэтому мы можем написать такой код для спортсмена, который любит отжиматься до упаду.
<br><br>
<code>
    bool  Устал=true;<br>
    <br>
    string Ответ;<br>
    <br>
    int  КоличествоОтжиманий=0;<br>
    <br>
    while (!Устал)<br>
    <br>
    {<br>
    <br>
    КоличествоОтжиманий++;<br>
    <br>
    Console.WriteLine (“Вы устали? (да/нет)”);<br>
    <br>
    Ответ=Console.ReadLine ();<br>
    <br>
    Ответ=Ответ.ToLower().Trim (); //уберем пробелы и сделаем  текст  строчным<br>
    <br>
    if (Ответ.Equals(“да”))<br>
    <br>
    Устал=true;<br>
    <br>
    }<br>
    <br>
    Console.WriteLine (“Вы сделали всего  {0} отжиманий”, КоличествоОтжиманий);<br>
</code><br>
    Пробежитесь мысленно по коду. Думаю, что здесь для вас все ясно. Единственное, на что стоит обратить внимание -  в последней строчке кода в методе WriteLine я написал непонятную для вас {0}. Дело в том, что этот метод умеет форматировать вывод, а нам нужно, чтобы наш счетчик плавно вписался в текст. Поставив {0}, я указал, что в этом месте будет наш счетчик. 0 обозначает порядок вывода переменных. Если бы я указал после запятой несколько переменных, то другие бы в тексте были бы помечены как {1}, {2} и т.д. Более подробно мы рассмотрим это с вами, когда будем изучать классы и методы, а это уже совсем скоро.
<br><br>   В циклах часто бывают ситуации, когда мы точно не знаем, где будет точка выхода. Например, предыдущий код можно отнести к подобному.  В случае такого цикла нужно использовать оператор прерывания цикла break. Встретив этот оператор, C# сразу же покинет тело цикла. В случае нашего верхнего кода можно было бы не присваивать переменной Устал значение true, а написать так:
<br><br><code>
    if (Ответ.Equals(“да”))<br>
    <br>
    break;</code>
        <br><br>
        Все, цикл прервался. Это очень часто используемый в циклах оператор, так что имейте это в виду.<br><br>

        Как вы поняли, циклы с пред и постусловием помогают решить массу задач. Тем не менее, иногда мы точно знаем, сколько раз будет выполняться тот или иной цикл. В этом случае следует использовать цикл с параметром.
              <br><br>   Помните аналогию с отжиманиями?  Нам там нужно было  отжаться 30 раз. Иными словами, мы знаем количество отжиманий наперед, поэтому нам выгоднее использовать цикл с параметром.
        Его синтаксис такой:<br>
        for (начальное значение цикла (с возможным объявлением;условие;приращение)<br>
        {<br>
        Если несколько выражений<br>
        }<br><br>
        Несмотря на то, что объявление выглядит громоздким, использовать такой цикл очень удобно. Давайте продемонстрируем это на примере с отжиманиями:<br><br>
              <code>
                  int i=0;<br>
                  for (; iConsole.WriteLine (“Вы сделали {0} отжиманий”,i);<br>
              </code><br><br>
        Кстати, как вы могли заметить, я часто привожу участки кода. Я не хочу загромождать страницу ненужной информацией, поэтому привожу саму суть.  Если вы хотите скомпилировать программу, то набирайте этот код в теле метода Main.
              <br><br> Итак,  давайте рассмотрим, что мы сделали. Обратите внимание на то, что я объявил переменную i вне скобок for. Я это сделал для того, чтобы можно было использовать i уже дальше в программе. Сейчас время сделать маленькое лирическое отступление.
              <br><br>  Дело в том, что в сишной программе переменная будет делиться так или иначе на две группы – локальные и глобальные. Хотя в C# глобальных переменных нет (если сравнивать их с аналогиями в C++ и C), тем не менее, есть такие переменные, которые можно использовать в любом месте вашего класса. Это так называемые члены- класса. Более подробно мы это рассмотрим, когда будем изучать ООП.
              <br><br>   В противовес им существуют локальные переменные. Они живут относительно небольшой промежуток времени в относительно небольшом участке кода. Для чего они нужны? Для ускорения работы программы. Дело в том, что локальные переменные заносятся в программный стек и оттуда их быстро извлечь. Если вам это пока непонятно, то вам стоит подождать, когда я буду писать о стеке.
              <br><br>   Локальные переменные входят в методы, в тела условий и циклов, наподобие того, что мы сейчас рассмотрели. Особенность локальной переменной заключается в том, что она известна только в том участке кода, где мы ее используем. Это означает, что, например, в реализации нашего цикла таким образом (это, обычно, так нужно делать):
              <br><br><code>
        for (int i=0; i<30;i++); console.writeline (i);<br>
</code><br>
                мы получим ошибку компиляции, так как c# не знает о переменной i. а все лишь потому, что эта переменная известна только в теле цикла. например, если бы мы написали так
              <br><br>            <code>
                                 for(int i=0; i<30;i++) //обратите внимание, здесь нет точки с запятой, Console.WriteLine является телом цикла<br>
           
            {<br>
            Console.WriteLine (i);<br>

            }</code><br><br>
            Наберите и запустите этот код. Посмотрите как он работает.
              <br><br> Кроме того, нам никто не запрещает самим указывать коффициент приращения. Например, нам нужно вывести список четных чисел от 2 до 50. Тогда мы поступим так:
           <br><br> <code>
            for (int i=2; i<=50;i+=2}<br>
            Console.WriteLine (i);<br></code><br>
            Думаю, смысл вам понятен. Еще один важный момент при использовании цикла с параметром является его гибкость в настройках. Хотя лично я не приветствую такой подход (все –таки, я начинал программировать с Паскаля, а там эти безобразия пресекались на корню), тем не менее, другие программисты часто используют эту возможность. Так что не удивляйтесь, если увидите такой код:
             <br> <br><code>
            int k=3; for (;;) { k++; if (k>10) break;}<br>
            Console.WriteLine (k);<br>
                </code>
              <br><br> Как видите, можно делать и такое. Кроме того, такой цикл всегда можно превратить в цикл с пред или постусловием.
            Ну и напоследок. Где же применяются циклы с параметром? Как я уже сказал, когда мы точно знаем некие параметры цикла. Например, с использованием такого цикла очень легко вывести ряд Фибоначчи или же написать факториал.
