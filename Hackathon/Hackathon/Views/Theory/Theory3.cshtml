@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Урок 3";
}

<div class="page-header">
    <h1>Урок 3</h1>
</div>
<p> </p>


<p>
    В прошлом уроке мы научились создавать проекты в VC # и рассмотрели структуру типичной консольной программы.
</p><p>
    В этом уроке мы изучим, что такое переменная и основные арифметические операции на C#. К сожалению, хотя тема и очень простая, но в силу своего объема ее лучше разделить на две части. В этой части вы познакомитесь именно с переменными.
</p>  <p>
    Одно из правил программирования- код должен быть максимально универсальным. Если вы помните, в предыдущем уроке мы запрашивали имя пользователя и выводили его на экран. Для этой цели мы объявили переменную name типа string (строка). Конечно, если вы единоличный пользователь компьютера, то можно было не мучиться с вводом имени и просто выводить уже готовое имя на экран:
</p><p>
    <code> Console.WriteLine (“Привет Вячеслав!”);</code>
</p><p>
    Можно даже воспользоваться статическим свойством UserName класса Environment и написать так:
</p><p>
        <code> Console.WriteLine("Привет " +Environment.UserName);</code>
</p><p>
    В этом случае на консоль выведется имя пользователя компьютера, что, в принципе, почти всегда совпадает с его реальным именем.
</p><p>
    Однако такая программа теряет гибкость. Вывод на экран будет строго предопределен рамками кода. Использование переменных как раз и позволяют решить подобную проблему.
</p><p>
    Честно говоря, я давал много уроков и тема переменных немного уже надоела мне. В уроке 2 по C++: «Укрощение переменных» я постарался максимально понятно описать что это такое и для чего они нужны. Не хочу повторяться, а читателям рекомендую ознакомиться с указанным уроком. Пусть вас не смущает, что он по C++. Как я уже говорил, C# это потомок C++.
</p> <p>
    Тем не менее, коснуться темы переменных можно и в этом уроке, но уже не так подробно. Итак, вернемся к нашему многострадальному выводу на экран имени пользователя.
</p> <p>
    Представьте, что нам нужно вывести имя в нескольких местах программы. Можно вводить его в том же духе, однако так или иначе у вас накопятся проблемы. Допустим, что у вас в программе имя пользователя упоминается тысячу раз. И что, вы все время будете его вводить? Кроме того, человек несовершенен — есть риск, что к своему имени вы случайно прибавите лишний пробел и здесь выскочит ошибка. Попробуйте запустить у себя на компьютере такой код:
</p><p>
       <code>
            If ("Пользователь " =="Пользователь")<br>
            Console.WriteLine ("Аутентификация верна");<br>
            else<br>
            Console.WriteLine ("Имя не совпадает");<br>
        </code>
</p><p>
    Естественно, что этот код вам нужно вбить в разделе Main вашего класса программы (настоятельно рекомендую запустить его). Как думаете, что напишет компьютер? Правильно, «Имя не совпадает». А все потому, что я сравнивал (два знака = обозначает операцию сравнения) два разных значения — одно с пробелом, другое без. А представьте, что таких ошибок может быть в программе просто уйма и вы на глаз просто все их не рассмотрите.
</p><p>
    Кроме того, представьте, что ваша программа приглянулась друзьям. Вы даете кому-то ее и говорите: » Вот тут в коде нужно поменять «Сережа» на «Андрей» и все будет нормально». А этот самый Андрей напишет с ошибками и вы будете виноваты.
</p><p>
    Вот так на соврешенно бессмыленном примере мы подошли к тому, что в программе нужно использовать переменные. Вместо того, чтобы в коде несколько раз писать «Дима», «Слава», Маша» и т.д., нужно использовать некое хранилище, в которое мы и поместим это значени. Таким хранилищем как раз и являются переменные.
</p><p>
    В нашем случае мы как раз создадим переменную name (или любое другое имя, неважно) и поместим в него значение путем оператора присваивания ( просто знак =, как в математике). Тогда у нас код будет такой:
    string name=»Владимир»;
</p><p>
    Теперь мы можем вместо слово «Владимир» в коде вызывать переменную name и не опасаться за неправильный ввод данных. Кроме того, вы получаете гибкость кода. В случае с тем же выдуманным другом Андреем, вам уже нужно будет присвоить переменной name значение «Андрей».
</p><p>
    Но мы же программисты, не так ли? Зачем этого Андрея пускать в наш код. Давайте просто сделаем интерфейс, позволяющий ввести абсолютно любое имя, будь то Сергей или какой-нибудь Гильгамеш. В этом случае переменные будут как нельзя кстати. Дело в том, что переменная на то и переменная, что может принимать любое значение согласно своему типу. Имя «Владимир» в коде величина постоянная и мы изменить его не в силах. Однако переменной name, хранящей в себе «Владимир», мы вправе потом присвоить новое значение, например «Юлия». Удобно, не так ли?
    Мы пока пишем консольные приложения. В них для ввода данных с клавиатуры используется метод ReadLine класса Console. Он возвращает строку на экране вашей консоли. В нашем случае, это будет выглядеть так:
</p><p><code>
    string name=Console.ReadLine ();
</code>
</p><p>
    Здесь мы считали в переменную name строку с клавиатуры. Как видите, все достаточно просто.
</p> <p>
    Переменные крайне полезная штука в программировании. Однако всегда нужно учитывать типизацию переменной. C# строго типизирированный язык. Это означает, что программисту самому нужно заботиться о типе данных переменной. Конечно, есть языки, в которых этого делать не нужно — тот же Perl, где мы вправе объявить переменную $name и предоставить механизм выделения памяти для нее уже самому языку. В C# подобного нельзя делать.
</p> <p>
    Для чего придумали эту типизацию? Все очень просто — каждый тип памяти занимает определенный объем памяти в вашем компьютере. Пусть он и небольшой, до когда переменных несколько миллионов или миллиардов, тут уже все становится критичным. Представьте себе, что у вас стоит задача перенести 10 литров воды и 10 булок хлеба. Естесственно, что переноса вы выберите в качестве тары для воды ведро, а для хлеба -большую сумку. Конечно, можно запихать хлеб в ведро и перенести, но в сумке воду вы уже вряд ли перенесете. Так и в программировании — неправильно выбранный тип данных вам изрядно попортит нервы.
    В общем случае, переменная на C# объявляется так:
    тип _переменной имя_переменной;
</p>  <p>
    Обратите внимание, что типом переменной может быть любой из встроенных типов, так и созданный программистом (классы и т.д.). C# поддерживает Unicode, а это означает, что вы можете вполне написать имя переменной русскими символами и компилятор даже не обратит внимание (что нельзя делать в том же C++ или Delphi). Правила именования переменной просты. Нельзя давать имя переменной, совпадающее с ключевым словом языка, имя не должно начинаться с цифр. Также обратите внимание, что C# обращает внимание на регистр ввода. Иными словами, переменные name и Name -это две совершенно разные переменные.
    С именование переменных, думаю, что вы разобрались. Единственное, что хочу добавить — давайте переменным осмысленные имена и старайтесь предварять префиксами. Представьте, что у вас есть переменные a1m, b34m и т.п. Да через месяц вы даже не сможете вспомнить, что они обозначают. А ведь эти переменные вы могли назвать там height, age и т.д. Еще один момент — старайтесь называть свои переменные строчными буквами. Дело в том, что это в последствии сэкономит вам массу времени. В C# с прописной быквы начинаются имена классов и структур, а ваши переменные просто могут запутать вас же самих.


 <p>
    C# -строго типизированный язык, а это значит, что мало объявить переменную –нужно соотнести ее с подходящим типом.  А вот теперь обратите внимание – в C# типы данных разделяются на две отличных друг от друга группы. Одна группа включает в себя так называемые типы-значения (value types). Фактически, это обычные примитивные типы данных, которые есть в любом сиподобном языке. Ниже я приведу список этих типов с кратким описанием. Я не буду загружать вас дипазонами значений этих типов – всегда можно посмотреть это, написав простенькую программку для этого. Итак, вот основные базовые типы языка C#:
</p>

    char – символьный тип. Предназначен для хранения любых символов в вашей программе.<br>
    bool- логический тип. Может принимать либо true, либо fasle. Переменная, объявленная этим типом будет иметь по-умолчанию true<br>
    byte – байт он, как говорится, и в Африке байт. Это означает, что в него может влезть всего число 0 до 255. Почему 255? Все просто – один байт равен 8 битам. А 2 в степени 8 равно 256. Но у нас есть 0, поэтому предельное число будет 255.  Этот тип применяется тогда, когда нужно хранить небольшое значение, например, возраст. Учтите, что если вздумаете присвоить переменной этого типа значение больше 255, то компилятор выдаст ошибку. Кроме того, тип byte является беззнаковым – то есть, он может хранить только положительные числа.<br>
    sbyte – это тот же byte, но только переменная этого типа может иметь отрицательное значение. В этом случае диапазон значений будет лежать от -128 до 127<br>
    int –  это тип данных,  котором можно хранить только целые числа.  Это самый основной тип для манипуляций с целыми числами. Обычно его хватает для большинства задач. Однако изредка может понадобиться хранить очень большое значение или наоборот, маленькое (хотя для маленьких чисел можно также смело ставить тип int). Поэтому тип  int разделяется на свои подвиды:<br>
    short – короткое целое число.<br>
    ushort – тоже самое,  только без знака.<br>
    long –длинное целое, предназначенное для хранения больших чисел. Больше него только тип decimal. Запомните важную вещь – компилятору нужно указывать принадлежность переменной к данному типу суффиксом L или l. Например, long a=78485994L . Иначе компилятор посчитает переменную типом int.<br>
    ulong – только положительные числа long<br>
    uint –только положительные числа int<br>
    decimal – хранит ну очень большие целые числа. Самое оно для финансовых программ!<br>
    float – содержит дробные числа (так называемые вещественные числа или числа с плавающей точкой) . Подобно типу long требует указание суффикса f .Например, float floatvalue = 34.6f<br>
    double – вещественные числа с двойной точностью после знака запятой. По-умолчанию, это основной тип для всех дробных чисел.<br>
    string – строка. Тут, я думаю, все понятно.<br>
 <p>
    В противовес значимым типам в C# была введена вторая группа типов – это ссылочные типы. К ним относятся классы, о которых мы поговорим значительно позже.
</p>  <p>
    Почему были введены такие группы? Если думаете, что все это для того, чтобы запутать программиста, то вы ошибаетесь. Дело в том, что тип данных напрямую влияет на производительность вашего кода. Причина этого явления заключается в том, что  переменные этих типов данных размещаются в разных областях памяти -  в так называемой куче (это вся ваша оперативная память) лежат классы, а в быстрой стековой памяти лежат небольшие по своим размерам типы-значения.
</p>  <p>
    Это очень удачных подход, так как работа со стеком очень быстрая. Однако стек имеет очень подлое свойство – он ограничен в своих размерах. Поэтому переменные типов-значений занимают мало памяти иначе просто произойдет переполнение стека, а это не очень приятная вещь. Чтобы этого не случилось, для переменных, занимающих много памяти (это как раз объекты ваших классов) выделяется место в куче. Единственный неприятный момент подобного подхода – переменную гораздо быстрее достать из стека, нежели из кучи. Поэтому в C# был принят подход, в котором в стеке хранится ссылка на область кучи. Это ускоряет работу.
</p>     Итак, вы уже знаете основные типы данных. Теперь, давайте рассмотрим как объявляются переменные. Синтаксис предельно прост:
    тип_переменной имя_переменной ;
 <p>
    Учтите, что можно объявить сразу несколько переменных одного типа в одной декларации:
</p>
   
   <code> int a,b,c,d;</code>
<p>
    Все четыре переменных будут иметь тип int. Кроме того, в C# допускается присвоение переменной значения сразу же при объявлении:
</p>
   
 <code>
    int a=34, b=12;
</code>
    C# поддерживает Unicode, а это означает, что можно объявлять имена переменных русскими буквами:
   
 <code>
    int Первое_число=34;
</code>
  <p>  Но так делать обычно не рекомендуется, хотя сейчас я часто вижу такой подход. Об этом подходе мы поговорим ниже.</p>
  <p>  Как видите, все просто. А теперь давайте рассмотрим случай, который все больше набирает обороты в российских айти-компаниях.</p>
  <p>
    Помните оператор using? С помощью него мы подключали пространства имен. Однако это не все, что он умеет.  Дело в том, что с помощью using можно создавать псевдонимы всех типов. Давайте в качестве примера создадим проект, в котором мы сделаем русские аналоги встроенных типов.
</p><p>
    Создайте консольный проект в Visual Studio или Sharp Developer. Назовите его lesson 2 и добавьте в код следующие строки:
</p>
    <code>
    using целое=System.Int32; // псевдоним int<br>
    using дробь=System.Double; //псевдоним double<br>
    using строка=System.String; //строка<br>
    using символ=System.Char;<br>
</code><br>
    Теперь в коде можно использовать наши псевдонимы вместо англоязычных определений. Посмотрите, например, такой код:<br><br>
   <code>
    using System;<br>
    using целое=System.Int32; // псевдоним int<br>
    using дробь=System.Double; //псевдоним double<br>
    using строка=System.String; //строка<br>
    using символ=System.Char;<br>
    using Консоль=System.Console; //псевдоним класса Console<br>
<br>
    namespace Типы_данных<br>
    {<br>
    class Program<br>
    {<br>
    public static void Main(string[] args)<br>
    {<br>
    строка Имя="Андрей";<br>
    Консоль.WriteLine ("Как дела, " + Имя + "?");<br>
    целое число1=34;<br>
    дробь число2=12.3;<br>
<br>
    Console.Write("Нажмите клавишу для выхода . . . ");<br>
    Console.ReadKey(true);<br>
    }<br>
    }<br>
    }<br>
</code>